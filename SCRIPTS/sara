#!/bin/bash

usage () {
echo "
semi automatic RNA-Seq analysis

Usage: "$(basename "$0")" -c <config file name>

-c  Name of CSV file that contains the list of the softwares and the experimental groups.
-t  Max number of threads (default: all cores).
-u  Update conda dependencies.
"
exit -1
}

update () {

    mamba update -y -n base -c conda-forge -c anaconda -c bioconda -c defaults conda
    mamba update -y -n sara_dge -c conda-forge -c anaconda -c bioconda -c defaults --all
    mamba update -y -n sara_prep -c conda-forge -c anaconda -c bioconda -c defaults --all

exit -1
}

while getopts "hc:t:u" OPT; do
    case "$OPT" in
        h) usage;;
        c) ID="$OPTARG";;
        t) THREADS="$OPTARG";;
		u) update;;
    esac
done

SARA="$HOME"/sara

ANALYSISDIR="$SARA"/ANALYSIS/"$ID"

echo "" && echo "Output path: "$ANALYSISDIR""
echo "Log Analysis: "$ANALYSISDIR"/"$ID"_log_$(date +'%Y-%m-%d').txt"

[ ! -d "$ANALYSISDIR" ] && mkdir "$SARA"/ANALYSIS "$ANALYSISDIR" "$ANALYSISDIR"/ALIGN "$ANALYSISDIR"/CONCATENATED \
    "$ANALYSISDIR"/DEG "$ANALYSISDIR"/INDEX "$ANALYSISDIR"/QC1 "$ANALYSISDIR"/QC2 "$ANALYSISDIR"/REFERENCE "$ANALYSISDIR"/TRIMMED

bg() {

    start=$(date +%s.%N)

    if [[ -z "$THREADS" ]]; then THREADS=$(lscpu | grep 'CPU(s):' | awk '{print $2}' | sed -n '1p'); fi

    find "$SARA"/RAW/"$ID" -type f -name '*.fastq.gz' -exec cp -vat "$ANALYSISDIR" {} +

    for i in $(find "$ANALYSISDIR" -type f -name "*.fastq.gz" | awk -F/ '{print $NF}' | awk -F"_L" '{print $1}' | \
        sort -u); do
            cat "$ANALYSISDIR"/"$i"_L00*_R1_001.fastq.gz > "$ANALYSISDIR"/CONCATENATED/"$i"_R1.fastq.gz
            cat "$ANALYSISDIR"/"$i"_L00*_R2_001.fastq.gz > "$ANALYSISDIR"/CONCATENATED/"$i"_R2.fastq.gz
    done

    rm "$ANALYSISDIR"/*_001.fastq.gz

    source activate rnaseq

    fastqc -t "$THREADS" $(find "$SARA"/RAW/"$ID" -type f -name "*.fastq.gz") -o "$ANALYSISDIR"/QC1
    fastqc -t "$THREADS" $(find "$ANALYSISDIR"/CONCATENATED -type f -name "*.fastq.gz") -o "$ANALYSISDIR"/QC2

    multiqc -s -i ""$ID" RAW" -ip --no-data-dir -n "$ANALYSISDIR"/"$ID"_RAW_multiqc_report "$ANALYSISDIR"/QC1/*
    multiqc -s -i ""$ID" CONCATENATED" -ip --no-data-dir -n "$ANALYSISDIR"/"$ID"_CONCATENATED_multiqc_report \
        "$ANALYSISDIR"/QC2/*

    TRIMM=$(cat "$SARA"/SHEETS/"$ID".csv | sed -n 1p | awk -F, '{print $3}')
    if [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]]; then
        for i in $(find "$ANALYSISDIR"/CONCATENATED -type f -name "*.fastq.gz" | awk -F/ '{print $NF}' | awk -F'_S' '{print $1}' | sort -u); do
            trimmomatic PE -threads "$THREADS" -phred33 \
            "$ANALYSISDIR"/CONCATENATED/"$i"*R1.fastq.gz "$ANALYSISDIR"/CONCATENATED/"$i"*R2.fastq.gz \
            "$ANALYSISDIR"/TRIMMED/"$i"_R1_PAIRED.fastq.gz "$ANALYSISDIR"/TRIMMED/"$i"_R1_UNPAIRED.fastq.gz \
            "$ANALYSISDIR"/TRIMMED/"$i"_R2_PAIRED.fastq.gz "$ANALYSISDIR"/TRIMMED/"$i"_R2_UNPAIRED.fastq.gz \
            LEADING:3 TRAILING:3 SLIDINGWINDOW:4:25 MINLEN:36
        done
    fi

    REFERENCE=$(cat "$SARA"/SHEETS/"$ID".csv | sed -n 1p | awk -F, '{print $4}')
    if [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][8][.][Pp][1][3] ]]; then
        wget http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_38/GRCh38.p13.genome.fa.gz -q \
        -O "$ANALYSISDIR"/REFERENCE/"$REFERENCE".fa.gz
        wget http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_38/gencode.v38.chr_patch_hapl_scaff.annotation.gtf.gz -q \
        -O "$ANALYSISDIR"/REFERENCE/"$REFERENCE".gtf.gz
        gunzip "$ANALYSISDIR"/REFERENCE/"$REFERENCE".fa.gz
        gunzip "$ANALYSISDIR"/REFERENCE/"$REFERENCE".gtf.gz
    else
        if [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][7] ]]; then
        wget http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_38/GRCh37_mapping/GRCh37.primary_assembly.genome.fa.gz -q \
        -O "$ANALYSISDIR"/REFERENCE/"$REFERENCE".fa.gz
        wget http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_38/GRCh37_mapping/gencode.v38lift37.annotation.gtf.gz -q \
        -O "$ANALYSISDIR"/REFERENCE/"$REFERENCE".gtf.gz
        gunzip "$ANALYSISDIR"/REFERENCE/"$REFERENCE".fa.gz
        gunzip "$ANALYSISDIR"/REFERENCE/"$REFERENCE".gtf.gz
        fi
    fi

    MAPPING=$(cat "$SARA"/SHEETS/"$ID".csv | sed -n 1p | awk -F, '{print $5}')
    if [[ "$MAPPING" == [Ss][Tt][Aa][Rr] ]]; then
        STAR --runThreadN "$THREADS" --runMode genomeGenerate --genomeDir "$ANALYSISDIR"/INDEX \
            --genomeFastaFiles "$ANALYSISDIR"/REFERENCE/"$REFERENCE".fa
        for i in $(find "$ANALYSISDIR"/TRIMMED -type f -name "*.fastq.gz" | awk -F/ '{print $NF}' | awk -F'_' '{print $1}' | sort -u); do
            STAR --runThreadN "$THREADS" --runMode alignReads --genomeDir "$ANALYSISDIR"/INDEX \
            --sjdbGTFfile "$ANALYSISDIR"/REFERENCE/"$REFERENCE".gtf \
            --readFilesIn "$ANALYSISDIR"/TRIMMED/"$i"_R1_PAIRED.fastq.gz \
            "$ANALYSISDIR"/TRIMMED/"$i"_R2_PAIRED.fastq.gz --readFilesCommand zcat \
            --outFileNamePrefix "$ANALYSISDIR"/ALIGN/"$i"_ --outSAMtype BAM Unsorted --outReadsUnmapped Fastx
        done
    fi

    COUNT=$(cat "$SARA"/SHEETS/"$ID".csv | sed -n 1p | awk -F, '{print $6}')
    if [[ "$COUNT" == [Ff][Ee][Aa][Tt][Uu][Rr][Ee][Cc][Oo][Uu][Nn][Tt][Ss] ]]; then
        featureCounts -a "$ANALYSISDIR"/REFERENCE/"$REFERENCE".gtf -o "$ANALYSISDIR"/"$ID"_counts.txt \
        -s 2 -G "$ANALYSISDIR"/REFERENCE/"$REFERENCE".fa -p --countReadPairs -C -T "$THREADS" \
        $(cat "$SARA"/SHEETS/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$ANALYSISDIR"/ALIGN/ '$2~/EXP|CTRL/ \
            {print ALIGN_PATH $1"_Aligned.out.bam"}' | xargs)
    fi

    source activate r

    DEG=$(cat "$SARA"/SHEETS/"$ID".csv | sed -n 1p | awk -F, '{print $7}')
    if [[ "$DEG" == [Dd][Ee][Ss][Ee][Qq][2] ]]; then
        OUTPUT_PATH="$ANALYSISDIR"/DEG
        COUNTDATA="$ANALYSISDIR"/"$ID"_counts.txt
        HEADER=$(echo "$ANALYSISDIR"/ALIGN/ | tr / . | sed 's/.home/X.home/g')
        EXP_GROUP=$(cat "$SARA"/SHEETS/"$ID".csv | sed 1d | awk -F, '$2~/EXP/ {print $1}' | wc -l)
        CTRL_GROUP=$(cat "$SARA"/SHEETS/"$ID".csv | sed 1d | awk -F, '$2~/CTRL/ {print $1}' | wc -l)
        SMALL_GROUP=$(if [ $COUNTEXP -le $COUNTCTRL ]; then echo $COUNTEXP; else echo $COUNTCTRL;fi)
        Rscript "$SARA"/SCRIPTS/DESeq2.R $OUTPUT_PATH $COUNTDATA $HEADER $EXP_GROUP $CTRL_GROUP $SMALL_GROUP
    fi

    end=$(date +%s.%N)

    runtime=$(python -c "print(${end} - ${start})")

    echo "" && echo "Done. The runtime was "$runtime" seconds."

}

bg $1 &>>"$ANALYSISDIR"/"$ID"_log_$(date +'%Y-%m-%d').txt &

exit 0
