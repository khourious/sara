#!/bin/bash

usage () {
    echo "
SARA: semi automatic RNA-Seq analysis

Usage: $(basename "$0") -c <config file name>

Command line parameters:
  -c arg    Name of CSV file that contains the list of the softwares and the experimental groups.
  -h        Print this help and exit.
  -t arg    Max number of threads (default: all cores minus 2).
  -u        Update conda dependencies."
exit -1
}

update () {
    mamba update -y -n base -c conda-forge -c anaconda -c bioconda -c defaults conda
    mamba update -y -n sara_dge -c conda-forge -c anaconda -c bioconda -c defaults --all
    mamba update -y -n sara_prep -c conda-forge -c anaconda -c bioconda -c defaults --all
exit -1
}

while getopts "c:ht:u" OPT; do
    case "$OPT" in
        c) SHEET="$OPTARG";;
        h) usage;;
        t) THREADS="$OPTARG";;
        u) update;;
    esac
done

SARA="$HOME"/sara

ID=$(basename "$SHEET" | awk -F. '{print $1}')

if [[ -z "$THREADS" ]]; then
    THREADS=$(lscpu | grep 'CPU(s):' | awk '{print $2}' | sed -n '1p' | awk '{print $1-2}')
fi

if [[ -z "$SHEET" ]]; then
    usage
else
    [[ ! -d "$SARA"/analysis ]] && mkdir "$SARA"/analysis
    [[ ! -d "$SARA"/analysis/"$ID" ]] && mkdir "$SARA"/analysis/"$ID"
    echo "" && echo "Output path: "$SARA"/analysis/"$ID""
    echo "Log Analysis: "$SARA"/analysis/"$ID"/"$ID".log.$(uname -n).$(date +'%Y-%m-%d').txt"
    echo "" && echo "To display the log output in fulscreen: watch tail -n 20 "$SARA"/analysis/"$ID"/"$ID".log.$(uname -n).$(date +'%Y-%m-%d').txt"
fi

bg() {
    start=$(date +%s.%N)
    if [[ -z "$SHEET" ]]; then
        usage
    else
        [[ ! -d "$SARA"/analysis/"$ID"/concatenated ]] && mkdir "$SARA"/analysis/"$ID"/concatenated
        if [[ ! $(ls -R "$SARA"/analysis/"$ID"/concatenated 2>/dev/null | grep fastq) ]]; then
            if [[ $(find "$SARA"/raw/"$ID" -type f -name '*_L00*') ]]; then
                for i in $(find "$SARA"/raw/"$ID" -type f -name "*.fastq.gz" | awk -F/ '{print $NF}' | awk -F'_L' '{print $1}' | awk -F_ '{print $1}' | sort -u); do
                    cat "$SARA"/raw/"$ID"/*/"$i"*_R1_001.fastq.gz >> "$SARA"/analysis/"$ID"/concatenated/"$i".R1.fastq.gz
                    cat "$SARA"/raw/"$ID"/*/"$i"*_R2_001.fastq.gz >> "$SARA"/analysis/"$ID"/concatenated/"$i".R2.fastq.gz
                done
            elif [[ $(find "$SARA"/raw/"$ID" -type f -name '*_1.fastq.gz') ]]; then
                for i in $(find "$SARA"/raw/"$ID" -type f -name "*.fastq.gz" | awk -F/ '{print $NF}' | awk -F_ '{print $1}' | sort -u); do
                    cat "$SARA"/raw/"$ID"/"$i"_1.fastq.gz > "$SARA"/analysis/"$ID"/concatenated/"$i".R1.fastq.gz
                    cat "$SARA"/raw/"$ID"/"$i"_2.fastq.gz > "$SARA"/analysis/"$ID"/concatenated/"$i".R2.fastq.gz
                done
            fi
        fi
        [[ ! -d "$SARA"/analysis/"$ID"/fastqc1 ]] && mkdir "$SARA"/analysis/"$ID"/fastqc1
        [[ ! -d "$SARA"/analysis/"$ID"/fastqc2 ]] && mkdir "$SARA"/analysis/"$ID"/fastqc2
        [[ ! -d "$SARA"/analysis/"$ID"/multiqc ]] && mkdir "$SARA"/analysis/"$ID"/multiqc
        source activate sara_prep
        if [[ ! $(ls -R "$SARA"/analysis/"$ID"/fastqc1 2>/dev/null | grep html) ]]; then
            fastqc -t "$THREADS" $(find "$SARA"/raw/"$ID" -type f -name "*.fastq.gz") -o "$SARA"/analysis/"$ID"/fastqc1
            multiqc -s -i ""$ID" RAW" -ip --no-data-dir -n "$SARA"/analysis/"$ID"/multiqc/"$ID".raw.multiqc.report "$SARA"/analysis/"$ID"/fastqc1/*
        fi
        if [[ ! $(ls -R "$SARA"/analysis/"$ID"/fastqc2 2>/dev/null | grep html) ]]; then
            fastqc -t "$THREADS" $(find "$SARA"/analysis/"$ID"/concatenated -type f -name "*.fastq.gz") -o "$SARA"/analysis/"$ID"/fastqc2
            multiqc -s -i ""$ID" CONCATENATED" -ip --no-data-dir -n "$SARA"/analysis/"$ID"/multiqc/"$ID".concatenated.multiqc.report "$SARA"/analysis/"$ID"/fastqc2/*
        fi
        TRIMM=$(cat "$SARA"/sheets/"$ID".csv | sed -n 1p | awk -F, '{print $1}')
        [[ ! -d "$SARA"/analysis/"$ID"/trimmed ]] && mkdir "$SARA"/analysis/"$ID"/trimmed
        for i in $(find "$SARA"/analysis/"$ID"/concatenated -type f -name "*.fastq.gz" | awk -F/ '{print $NF}' | awk -F. '{print $1}' | sort -u); do
            if [[ "$TRIMM" == [Ff][Aa][Ss][Tt][Pp] ]]; then
                TRIMMID=FP
                if [[ ! $(ls -R "$SARA"/analysis/"$ID"/trimmed 2>/dev/null | grep "$i"_"$TRIMMID") ]]; then
                    fastp -w "$THREADS" -3 -5 -W 4 -M 25 -l 36 --in1 "$SARA"/analysis/"$ID"/concatenated/"$i"*R1.fastq.gz --in2 "$SARA"/analysis/"$ID"/concatenated/"$i"*R2.fastq.gz --out1 "$SARA"/analysis/"$ID"/trimmed/"$i"_"$TRIMMID".R1.paired.fastq.gz --out2 "$SARA"/analysis/"$ID"/trimmed/"$i"_FP.R2.paired.fastq.gz --unpaired1 "$SARA"/analysis/"$ID"/trimmed/"$i"_"$TRIMMID".R1.unpaired.fastq.gz --unpaired2 "$SARA"/analysis/"$ID"/trimmed/"$i"_"$TRIMMID".R2.unpaired.fastq.gz -j "$SARA"/analysis/"$ID"/trimmed/"$i".fastp.json -h "$SARA"/analysis/"$ID"/trimmed/"$i".fastp.html -R ""$i" fastp report"
                fi
            elif [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]]; then
                TRIMMID=TM
                if [[ ! $(ls -R "$SARA"/analysis/"$ID"/trimmed 2>/dev/null | grep "$i"_"$TRIMMID") ]]; then
                    trimmomatic PE -threads "$THREADS" -phred33 "$SARA"/analysis/"$ID"/concatenated/"$i"*R1.fastq.gz "$SARA"/analysis/"$ID"/concatenated/"$i"*R2.fastq.gz "$SARA"/analysis/"$ID"/trimmed/"$i"_TM.R1.paired.fastq.gz "$SARA"/analysis/"$ID"/trimmed/"$i"_TM.R1.unpaired.fastq.gz "$SARA"/analysis/"$ID"/trimmed/"$i"_TM.R2.paired.fastq.gz "$SARA"/analysis/"$ID"/trimmed/"$i"_TM.R2.unpaired.fastq.gz LEADING:3 TRAILING:3 SLIDINGWINDOW:4:25 MINLEN:36
                fi
            else
                echo "" && echo "ATTENTION ON TRIMMING SETUP!!!"
                echo "" && echo "Please check your CSV sheet."
                echo "" && echo "The name of the CSV file must corresponds the name of the library and contains comma-separated programs on the first line (i.e. 'trimm,mapping,count,deg)."
                echo "" && echo "From the second line on, it must contain the list of samples and the condition, also separated by a comma [CTRL are controls; EXP are experimentals]." && echo ""
            fi
        done
         REFERENCE=$(cat "$SARA"/sheets/"$ID".csv | sed -n 1p | awk -F, '{print $2}')
        [[ ! -d "$SARA"/analysis/"$ID"/reference ]] && mkdir "$SARA"/analysis/"$ID"/reference
        if [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][7] ]]; then # https://www.gencodegenes.org/human/
            REFERENCEID=GRCh37
            if [[ ! $(ls -R "$SARA"/analysis/"$ID"/reference 2>/dev/null | egrep "[Gg][Rr][Cc][Hh][3][7].f|[Gg][Rr][Cc][Hh][3][7].g") ]]; then
                echo "Downloading "$REFERENCEID" reference genome..."
                wget http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/latest_release/GRCh37_mapping/GRCh37.primary_assembly.genome.fa.gz -q -O "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa.gz
                wget http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/latest_release/GRCh37_mapping/gencode.v42lift37.annotation.gff3.gz -q -O "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3.gz
                echo "... done."
                gunzip "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa.gz
                gunzip "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3.gz
            fi
        elif [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][8] ]]; then # https://www.gencodegenes.org/human/
            REFERENCEID=GRCh38
            if [[ ! $(ls -R "$SARA"/analysis/"$ID"/reference 2>/dev/null | egrep "[Gg][Rr][Cc][Hh][3][8].f|[Gg][Rr][Cc][Hh][3][8].g") ]]; then
                echo "Downloading "$REFERENCEID" reference genome..."
                wget http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/latest_release/GRCh38.p13.genome.fa.gz -q -O "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa.gz
                wget http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/latest_release/gencode.v42.annotation.gff3.gz -q -O "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3.gz
                echo "... done."
                gunzip "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa.gz
                gunzip "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3.gz
            fi
        elif [[ "$REFERENCE" == [Gg][Rr][Cc][Mm][3][9] ]]; then # https://www.gencodegenes.org/mouse/
            REFERENCEID=GRCm39
            if [[ ! $(ls -R "$SARA"/analysis/"$ID"/reference 2>/dev/null | egrep "[Gg][Rr][Cc][Mm][3][9].f|[Gg][Rr][Cc][Mm][3][9].g") ]]; then
                echo "Downloading "$REFERENCEID" reference genome..."
                wget http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/latest_release/GRCm39.genome.fa.gz -q -O "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa.gz
                wget http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/latest_release/gencode.vM31.annotation.gff3.gz -q -O "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3.gz
                echo "... done."
                gunzip "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa.gz
                gunzip "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3.gz
            fi
        elif [[ "$REFERENCE" == [Cc][Hh][Mm][1][3] ]]; then # https://github.com/marbl/CHM13
            if [[ ! $(ls -R "$SARA"/analysis/"$ID"/reference 2>/dev/null | egrep "[Cc][Hh][Mm][1][3].f|[Cc][Hh][Mm][1][3].g") ]]; then
            REFERENCEID=CHM13
                echo "Downloading "$REFERENCEID" reference genome..."
                wget https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/CHM13/assemblies/chm13.draft_v1.1.fasta.gz -q -O "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa.gz
                wget https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/CHM13/assemblies/annotation/chm13.draft_v1.1.gene_annotation.v4.gff3.gz -q -O "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3.gz
                echo "... done."
                gunzip "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa.gz
                gunzip "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3.gz
            fi
        else
            echo "" && echo "ATTENTION ON REFERENCE SETUP!!!"
            echo "" && echo "Please check your CSV sheet."
            echo "" && echo "The name of the CSV file must corresponds the name of the library and contains comma-separated programs on the first line (i.e. 'trimm,mapping,count,deg)."
            echo "" && echo "From the second line on, it must contain the list of samples and the condition, also separated by a comma [CTRL are controls; EXP are experimentals]." && echo ""
        fi
        MAPPING=$(cat "$SARA"/sheets/"$ID".csv | sed -n 1p | awk -F, '{print $3}')
        [[ ! -d "$SARA"/analysis/"$ID"/index ]] && mkdir "$SARA"/analysis/"$ID"/index
        if [[ "$MAPPING" == [Ss][Tt][Aa][Rr] ]]; then
            MAPPINGID=ST
            if [[ $(ls -R "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID" 2>/dev/null | wc -l) -lt 10 ]]; then
                STAR --runThreadN "$THREADS" --runMode genomeGenerate --genomeDir "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID" --genomeFastaFiles "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa
            fi
        fi
        if [[ "$MAPPING" == [Ss][Tt][Aa][Rr] ]]; then
            MAPPINGID=ST
            for i in $(find "$SARA"/analysis/"$ID"/trimmed -type f -name "*.fastq.gz" | awk -F/ '{print $NF}' | awk -F_ '{print $1}' | sort -u); do
                if [[ ! $(ls -R "$SARA"/analysis/"$ID"/align 2>/dev/null | grep "$i"_"$TRIMMID"_"$MAPPINGID") ]]; then
                    STAR --runThreadN "$THREADS" --runMode alignReads --genomeDir "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID" --sjdbGTFfile "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 --sjdbGTFtagExonParentTranscript Parent --readFilesIn "$SARA"/analysis/"$ID"/trimmed/"$i"_"$TRIMMID".R1.paired.fastq.gz "$SARA"/analysis/"$ID"/trimmed/"$i"_"$TRIMMID".R2.paired.fastq.gz --readFilesCommand zcat --outFileNamePrefix "$SARA"/analysis/"$ID"/align/"$i"_"$TRIMMID"_"$MAPPINGID"_"$REFERENCEID". --outSAMtype BAM Unsorted --outReadsUnmapped Fastx
                else
                    echo "" && echo "ATTENTION ON MAPPING SETUP!!!"
                    echo "" && echo "Please check your CSV sheet."
                    echo "" && echo "The name of the CSV file must corresponds the name of the library and contains comma-separated programs on the first line (i.e. 'trimm,mapping,count,deg)."
                    echo "" && echo "From the second line on, it must contain the list of samples and the condition, also separated by a comma [CTRL are controls; EXP are experimentals]." && echo ""
                fi
            done
        elif [[ "$MAPPING" == [Bb][Oo][Ww][Tt][Ii][Ee][2] ]]; then
            MAPPINGID=BT2
            [[ ! -d "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID" ]] && mkdir "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID"
            if [[ ! $(ls -R "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID" 2>/dev/null | grep "$REFERENCEID"_"$MAPPINGID") ]]; then
                cd "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID"
                bowtie2-build --threads "$THREADS" -f ../../reference/"$REFERENCEID".fa "$REFERENCEID"_"$MAPPINGID"
            else
                if [[ $(ls -R "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID" 2>/dev/null | wc -l) -lt 7 ]]; then
                    cd "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID"
                    bowtie2-build --threads "$THREADS" -f ../../reference/"$REFERENCEID".fa "$REFERENCEID"_"$MAPPINGID"
                fi
            fi
            for i in $(find "$SARA"/analysis/"$ID"/trimmed -type f -name "*.fastq.gz" | awk -F/ '{print $NF}' | awk -F_ '{print $1}' | sort -u); do
                if [[ ! $(ls -R "$SARA"/analysis/"$ID"/align 2>/dev/null | grep "$i"_"$TRIMMID"_"$MAPPINGID") ]]; then
                    bowtie2 --threads "$THREADS" -x "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID"/"$REFERENCEID"_"$MAPPINGID" -1 "$SARA"/analysis/"$ID"/trimmed/"$i"_"$TRIMMID".R1.paired.fastq.gz -2 "$SARA"/analysis/"$ID"/trimmed/"$i"_"$TRIMMID".R2.paired.fastq.gz -S "$SARA"/analysis/"$ID"/align/"$i"."$TRIMMID"_"$MAPPINGID"_"$REFERENCEID".sam
                    samtools view -bS "$SARA"/analysis/"$ID"/align/"$i"_"$TRIMMID"_"$MAPPINGID"_"$REFERENCEID".sam > "$SARA"/analysis/"$ID"/align/"$i"_"$TRIMMID"_"$MAPPINGID"_"$REFERENCEID".bam
                    while ps -e | grep samtools; do
                        echo "converting SAM format to BAM format";
                    done
                    rm -rf "$SARA"/analysis/"$ID"/align/"$i"_"$TRIMMID"_"$MAPPINGID"_"$REFERENCEID".sam
                else
                    echo "" && echo "ATTENTION ON MAPPING SETUP!!!"
                    echo "" && echo "Please check your CSV sheet."
                    echo "" && echo "The name of the CSV file must corresponds the name of the library and contains comma-separated programs on the first line (i.e. 'trimm,mapping,count,deg)."
                    echo "" && echo "From the second line on, it must contain the list of samples and the condition, also separated by a comma [CTRL are controls; EXP are experimentals]." && echo ""
                fi
            done
        elif [[ "$MAPPING" == [Hh][Ii][Ss][Aa][Tt][2] ]]; then
            MAPPINGID=HT2
            [[ ! -d "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID" ]] && mkdir "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID"
            if [[ ! $(ls -R "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID" 2>/dev/null | grep "$REFERENCEID"_"$MAPPINGID") ]]; then
                cd "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID"
                hisat2-build --threads "$THREADS" -f ../../reference/"$REFERENCEID".fa "$REFERENCEID"_"$MAPPINGID"
            else
                if [[ $(ls -R "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID" 2>/dev/null | wc -l) -lt 9 ]]; then
                    cd "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID"
                    hisat2-build --threads "$THREADS" -f ../../reference/"$REFERENCEID".fa "$REFERENCEID"_"$MAPPINGID"
                fi
            fi
            for i in $(find "$SARA"/analysis/"$ID"/trimmed -type f -name "*.fastq.gz" | awk -F/ '{print $NF}' | awk -F_ '{print $1}' | sort -u); do
                if [[ ! $(ls -R "$SARA"/analysis/"$ID"/align 2>/dev/null | grep "$i"_"$TRIMMID"_"$MAPPINGID") ]]; then
                    cd "$SARA"/analysis/"$ID"/align
                    hisat2 --threads "$THREADS" -x "$SARA"/analysis/"$ID"/index/"$REFERENCEID"_"$MAPPINGID"/"$REFERENCEID"_"$MAPPINGID" -1 "$SARA"/analysis/"$ID"/trimmed/"$i"_"$TRIMMID".R1.paired.fastq.gz -2 "$SARA"/analysis/"$ID"/trimmed/"$i"_"$TRIMMID".R2.paired.fastq.gz -S "$i"_"$TRIMMID"_"$MAPPINGID"_"$REFERENCEID".sam
                    samtools view -bS "$SARA"/analysis/"$ID"/align/"$i"_"$TRIMMID"_"$MAPPINGID"_"$REFERENCEID".sam > "$SARA"/analysis/"$ID"/align/"$i"_"$TRIMMID"_"$MAPPINGID"_"$REFERENCEID".bam
                    while ps -e | grep samtools; do
                        echo "converting SAM format to BAM format";
                    done
                    rm -rf "$SARA"/analysis/"$ID"/align/"$i"_"$TRIMMID"_"$MAPPINGID"_"$REFERENCEID".sam
                else
                    echo "" && echo "ATTENTION ON MAPPING SETUP!!!"
                    echo "" && echo "Please check your CSV sheet."
                    echo "" && echo "The name of the CSV file must corresponds the name of the library and contains comma-separated programs on the first line (i.e. 'trimm,mapping,count,deg)."
                    echo "" && echo "From the second line on, it must contain the list of samples and the condition, also separated by a comma [CTRL are controls; EXP are experimentals]." && echo ""
                fi
            done
        fi
        COUNT=$(cat "$SARA"/sheets/"$ID".csv | sed -n 1p | awk -F, '{print $4}')
        COUNTID=FC
        [[ ! -d "$SARA"/analysis/"$ID"/counts ]] && mkdir "$SARA"/analysis/"$ID"/counts
        if [[ ! $(ls -R "$SARA"/analysis/"$ID"/counts 2>/dev/null | grep ""$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts") ]]; then
            if [[ "$COUNT" == [Ff][Ee][Aa][Tt][Uu][Rr][Ee][Cc][Oo][Uu][Nn][Tt][Ss] ]]; then
                if [[ "$TRIMM" == [Ff][Aa][Ss][Tt][Pp] ]] && [[ "$MAPPING" == [Ss][Tt][Aa][Rr] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][7] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_FP_ST_GRCh37.Aligned.out.bam"}' | xargs)
                elif [[ "$TRIMM" == [Ff][Aa][Ss][Tt][Pp] ]] && [[ "$MAPPING" == [Ss][Tt][Aa][Rr] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][8] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_FP_ST_GRCh38.Aligned.out.bam"}' | xargs)
                elif [[ "$TRIMM" == [Ff][Aa][Ss][Tt][Pp] ]] && [[ "$MAPPING" == [Ss][Tt][Aa][Rr] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Mm][3][9] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_FP_ST_GRCm39.Aligned.out.bam"}' | xargs)
                elif [[ "$TRIMM" == [Ff][Aa][Ss][Tt][Pp] ]] && [[ "$MAPPING" == [Ss][Tt][Aa][Rr] ]] && [[ "$REFERENCE" == [Cc][Hh][Mm][1][3] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_FP_ST_CHM13.Aligned.out.bam"}' | xargs)
                elif [[ "$TRIMM" == [Ff][Aa][Ss][Tt][Pp] ]] && [[ "$MAPPING" == [Bb][Oo][Ww][Tt][Ii][Ee][2] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][7] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_FP_BT2_GRCh37.bam"}' | xargs)
                elif [[ "$TRIMM" == [Ff][Aa][Ss][Tt][Pp] ]] && [[ "$MAPPING" == [Bb][Oo][Ww][Tt][Ii][Ee][2] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][8] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_FP_BT2_GRCh38.bam"}' | xargs)
                elif [[ "$TRIMM" == [Ff][Aa][Ss][Tt][Pp] ]] && [[ "$MAPPING" == [Bb][Oo][Ww][Tt][Ii][Ee][2] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Mm][3][9] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_FP_BT2_GRCm39.bam"}' | xargs)
                elif [[ "$TRIMM" == [Ff][Aa][Ss][Tt][Pp] ]] && [[ "$MAPPING" == [Bb][Oo][Ww][Tt][Ii][Ee][2] ]] && [[ "$REFERENCE" == [Cc][Hh][Mm][1][3] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_FP_BT2_CHM13.bam"}' | xargs)
                elif [[ "$TRIMM" == [Ff][Aa][Ss][Tt][Pp] ]] && [[ "$MAPPING" == [Hh][Ii][Ss][Aa][Tt][2] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][7] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_FP_HT2_GRCh37.bam"}' | xargs)
                elif [[ "$TRIMM" == [Ff][Aa][Ss][Tt][Pp] ]] && [[ "$MAPPING" == [Hh][Ii][Ss][Aa][Tt][2] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][8] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_FP_HT2_GRCh38.bam"}' | xargs)
                elif [[ "$TRIMM" == [Ff][Aa][Ss][Tt][Pp] ]] && [[ "$MAPPING" == [Hh][Ii][Ss][Aa][Tt][2] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Mm][3][9] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_FP_HT2_GRCm39.bam"}' | xargs)
                elif [[ "$TRIMM" == [Ff][Aa][Ss][Tt][Pp] ]] && [[ "$MAPPING" == [Hh][Ii][Ss][Aa][Tt][2] ]] && [[ "$REFERENCE" == [Cc][Hh][Mm][1][3] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_FP_HT2_CHM13.bam"}' | xargs)
                elif [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]] && [[ "$MAPPING" == [Ss][Tt][Aa][Rr] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][7] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_TM_ST_GRCh37.Aligned.out.bam"}' | xargs)
                elif [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]] && [[ "$MAPPING" == [Ss][Tt][Aa][Rr] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][8] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_TM_ST_GRCh38.Aligned.out.bam"}' | xargs)
                elif [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]] && [[ "$MAPPING" == [Ss][Tt][Aa][Rr] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Mm][3][9] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_TM_ST_GRCm39.Aligned.out.bam"}' | xargs)
                elif [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]] && [[ "$MAPPING" == [Ss][Tt][Aa][Rr] ]] && [[ "$REFERENCE" == [Cc][Hh][Mm][1][3] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_TM_ST_CHM13.Aligned.out.bam"}' | xargs)
                elif [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]] && [[ "$MAPPING" == [Bb][Oo][Ww][Tt][Ii][Ee][2] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][7] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_TM_BT2_GRCh37.bam"}' | xargs)
                elif [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]] && [[ "$MAPPING" == [Bb][Oo][Ww][Tt][Ii][Ee][2] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][8] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_TM_BT2_GRCh38.bam"}' | xargs)
                elif [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]] && [[ "$MAPPING" == [Bb][Oo][Ww][Tt][Ii][Ee][2] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Mm][3][9] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_TM_BT2_GRCm39.bam"}' | xargs)
                elif [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]] && [[ "$MAPPING" == [Bb][Oo][Ww][Tt][Ii][Ee][2] ]] && [[ "$REFERENCE" == [Cc][Hh][Mm][1][3] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_TM_BT2_CHM13.bam"}' | xargs)
                elif [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]] && [[ "$MAPPING" == [Hh][Ii][Ss][Aa][Tt][2] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][7] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_TM_HT2_GRCh37.bam"}' | xargs)
                elif [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]] && [[ "$MAPPING" == [Hh][Ii][Ss][Aa][Tt][2] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Hh][3][8] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_TM_HT2_GRCh38.bam"}' | xargs)
                elif [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]] && [[ "$MAPPING" == [Hh][Ii][Ss][Aa][Tt][2] ]] && [[ "$REFERENCE" == [Gg][Rr][Cc][Mm][3][9] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_TM_HT2_GRCm39.bam"}' | xargs)
                elif [[ "$TRIMM" == [Tt][Rr][Ii][Mm][Mm][Oo][Mm][Aa][Tt][Ii][Cc] ]] && [[ "$MAPPING" == [Hh][Ii][Ss][Aa][Tt][2] ]] && [[ "$REFERENCE" == [Cc][Hh][Mm][1][3] ]]; then
                    featureCounts -a "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".gff3 -o "$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt -s 2 -G "$SARA"/analysis/"$ID"/reference/"$REFERENCEID".fa -p --countReadPairs -C -T "$THREADS" $(cat "$SARA"/sheets/"$ID".csv | sed '1d' | awk -F, -v ALIGN_PATH="$SARA"/analysis/"$ID"/align/ '{print ALIGN_PATH $1"_TM_HT2_CHM13.bam"}' | xargs)
                else
                    echo "" && echo "ATTENTION ON COUNTING SETUP!!!"
                    echo "" && echo "Please check your CSV sheet."
                    echo "" && echo "The name of the CSV file must corresponds the name of the library and contains comma-separated programs on the first line (i.e. 'trimm,mapping,count,deg)."
                    echo "" && echo "From the second line on, it must contain the list of samples and the condition, also separated by a comma [CTRL are controls; EXP are experimentals]." && echo ""
                fi
            fi
        fi
        DEG=$(cat "$SARA"/sheets/"$ID".csv | sed -n 1p | awk -F, '{print $5}')
        [[ ! -d "$SARA"/analysis/"$ID"/deg ]] && mkdir "$SARA"/analysis/"$ID"/deg
        if [[ ! $(ls -R "$SARA"/analysis/"$ID"/deg 2>/dev/null | grep ""$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".diffexprShrinkage-results") ]]; then
            if [[ "$DEG" == [Dd][Ee][Ss][Ee][Qq][2] ]]; then
                DEGID=DESeq2
                OUTPUT_PATH="$SARA"/analysis/"$ID"/deg
                COUNTDATA="$SARA"/analysis/"$ID"/counts/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".counts.txt
                HEADER=$(echo "$SARA"/analysis/"$ID"/align/ | tr / . | sed 's/.home/X.home/g')
                PREFIX=$(echo "_"$TRIMMID"_"$MAPPINGID"_"$REFERENCEID"")
                EXP_GROUP=$(cat "$SARA"/sheets/"$ID".csv | sed 1d | awk -F, '$2~/EXP/ {print $1}' | wc -l)
                CTRL_GROUP=$(cat "$SARA"/sheets/"$ID".csv | sed 1d | awk -F, '$2~/CTRL/ {print $1}' | wc -l)
                SMALL_GROUP=$(if [ $EXP_GROUP -le $CTRL_GROUP ]; then echo $EXP_GROUP; else echo $CTRL_GROUP;fi)
                source activate sara_dge
                Rscript "$SARA"/scripts/DESeq2.R $OUTPUT_PATH $COUNTDATA $HEADER $PREFIX $EXP_GROUP $CTRL_GROUP $SMALL_GROUP
                mv "$SARA"/analysis/"$ID"/deg/diffexprShrinkage-results.csv "$SARA"/analysis/"$ID"/deg/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".diffexprShrinkage-results.csv
                mv "$SARA"/analysis/"$ID"/deg/diffexprShrinkage-volcanoplot.pdf "$SARA"/analysis/"$ID"/deg/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".diffexprShrinkage-volcanoplot.pdf
                mv "$SARA"/analysis/"$ID"/deg/qc-dispersions.pdf "$SARA"/analysis/"$ID"/deg/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".qc-dispersions.pdf
                mv "$SARA"/analysis/"$ID"/deg/qc-distance-heatmap.pdf "$SARA"/analysis/"$ID"/deg/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".qc-distance-heatmap.pdf
                mv "$SARA"/analysis/"$ID"/deg/qc-pca.pdf "$SARA"/analysis/"$ID"/deg/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".qc-pca.pdf
                mv "$SARA"/analysis/"$ID"/deg/qc-rlog.pdf "$SARA"/analysis/"$ID"/deg/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".qc-rlog.pdf
                mv "$SARA"/analysis/"$ID"/deg/qc-shrinkage-correction.pdf "$SARA"/analysis/"$ID"/deg/"$ID"_"$TRIMMID"_"$MAPPINGID"_"$COUNTID".qc-shrinkage-correction.pdf
            fi
        fi
    fi
    end=$(date +%s.%N)
    runtime=$(python -c "print(${end} - ${start})")
    echo "" && echo "Done. The runtime was "$runtime" seconds." && echo ""
}

bg &>>"$SARA"/analysis/"$ID"/"$ID".log.$(uname -n).$(date +'%Y-%m-%d').txt &

exit 0
